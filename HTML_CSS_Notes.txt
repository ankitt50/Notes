**********************************HTML CSS******************************************************************************************************
************************************************************************************************************************************************


Browser sends request to webserver and recieves back the Response. The response contains the HTML/CSS/JS files. A static website is where the files 
are sent as they are. But in dynamic websites, server first generate the response based on the request, and then sends back the response.

HTML - content
CSS - styling
JS - progg. language of the front-end. this makes the website dynamic.

VSCode (from Microsoft) - code editor

Setup of VSCode
1) Go to extensions (from the left hand side options), search for "prettier" code formatter and install and enable it.
2) Go to setting, search for default formatter, select prettier code formatter.
3) Go to setting, search for format on save, and check the cheeckbox.
4) Go to setting, search for Auto save, and select onfocuschange.
5) Go to setting, search for Tab size, and select 2.
6) Go to extensions (from the left hand side options), search for "one monokai" theme, and install and set color theme.
7) Go to extensions (from the left hand side options), search for "image preview" and install and enable it.
8) Go to extensions (from the left hand side options), search for "color highlight" and install and enable it.
9) Go to extensions (from the left hand side options), search for "Auto Rename Tag" and install and enable it.
10) Go to extensions (from the left hand side options), search for "Live server" and install and enable it.

index.html
** Always have index.html as the first entry point to the website.

write exclamation mark (!) and then hit tab to get html template in the VSCode.

Use MDN docs to read about HTML

**************************************************************************************************************************************************************************
**************************************************************************************************************************************************************************
********************************** 1. HTML FUNDAMENTALS******************************************************************************************************
**************************************************************************************************************************************************************************
**************************************************************************************************************************************************************************

HyperText Markup Langugage : to structure and describe the content fo a webpage. Its not a progg. language.


Element : <p> Sometext </p>

<p> : opening tag
</p> : closing tag
content : Sometext


Common HTML document structure

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>Title</title>
</head>
<body>
<h1> Main heading of the page</h1>
</body>
</html>

Comments in HTML
<!-- Comments -->


Headings / Text elements

<h1></h1>
<h2></h2>
<h3></h3>
<h4></h4>
<h5></h5>
<h6></h6>


<p></p> : paragraph

<b></b> : bold (older element, doesn't have any semantic meaning)
<strong></strong> : same as bold visually, but has semantic meaning (HTML 5)


<i></i> : italic (older element, doesn't have any semantic meaning)
<em></em> : same as italic visually, but has semantic meaning (HTML 5)

List elements in HTML

ordered list
<ol>
<li></li>
<li></li>
<li></li>
</ol>

unordered list
<ul>
<li></li>
<li></li>
<li></li>
</ul>

Image element in HTML

<img src="post-img.jpg" alt="alternative text" /> 
never miss the alternative text attribute, as it helps search engine to know about the image. Also, it allows blind people access our website, as screen\
readers use this attribute.


Hyperlinks in HTML

<a href="https://developer.mozilla.org/en-US/docs/Web/HTML" target="_blank" >MDN Web Docs</a> 

setting target = blank opens a new tab, when we click on the link


<a>MDN Web Docs</a> :: this isn't a hyperlink, href element makes an anchor tag a hyperlink
<a href="#"></a> :: It goes back to top of the page (placeholder link)




Structuring the Page

header, artcicle , footer are semantic elements, and doesn't change anything visually

<header>
<h1></h1>
<nav>
<a></a>
<a></a>
<a></a>
</nav>
</header>

<article>
<header></header>
....
...
..
</article>

<aside></aside>

<footer></footer>


Button in HTML
<button>Add to Cart</button>

**************************************************************************************************************************************************************************
********************************************************************************************************************************************
********************************** 2. CSS FUNDAMENTALS ******************************************************************************************************
**************************************************************************************************************************************************************************
********************************************************************************************************************************************

Cascading Style Sheets (CSS) describes the visual style / presentation of the content written in HTML.

h1 {
color: blue;
text-align: center;
font-size: 20px;
}

h1 :: selector
{....} :: declaration block
font-size  :: Property
20px :: value

property + value :: Declaration/Style


selector + declaration block :: A CSS rule

Inline CSS : <h1 style="color: blue"> Heading </h1>


Internal CSS 

<head>
..
..
...

<style>
h1 {
color : blue;
}
</style>
</head>


External CSS

<head>
<link href="style.css" rel="stylesheet" />
</head>

style.css

h1 {
color: blue;
}


Styling text elements

h1 {
color: blue;
font-size: 26px;
font-family: sans-serif;
text-transform: uppercase;
font-style: italic;
}

p {
line-height: 1.5;   --> It means line-height = 1.5 * font-size, by default, its value = 1.
}

** Inheritance causes the styling of the parent to be applied to the child elements also.

h4 {
text-align: center;
}

li {
font-family: sans-serif;
font-size: 20px;
}

list selector
h1,h2,h3,p,li {
font-family: sans-serif;
}

descendence selector :: it will select all 'p' elements inside the 'footer' element
footer p {
font-size: 16px;
}

article header p {
font-style: italic
}



Class and ID selectors
<p id="author">paragraph</p>

/*  Comments in CSS  */
#author {
font-style: italic;
}

#copyright {
font-size: 22px;
}

-- IDs can be used only once, so we can use classes if we want to use it again and again.


.related-author {
font-size: 18px;
font-weight: bold;
}


.related {
list-style: none  --> remove bullet points from the list elements
}

** never use id-selectors, always use classes in real world applications.



.main-header {
background-color: #f7f7f7
}

h1 {
color: #1098ad;
}

aside {
background-color: #f7f7f7;
border: 5px solid #1098ad; (border-width  border-style  border-color)
border-top: 5px solid #1098ad;
border-bottom: 5px solid #1098ad; 
}


** Use Hexadecimal notation for colors, but if transparency is required, use RGB notation.




.first-li {
 font-weight: bold;
}

(or)

li:first-child     (first-child is a psuedoclass)
{
font-weight: bold;
}

li:last-child {
font-style: italic;
}

li: nth-child(even) {
color: red;
}


** in the below case, the first 'p'-element of the article element will not get selected,
	instead the only those 'p'-elements which are also first child of article elment will be selected.
	
article p:first-child {
color: red;
}

article p:last-child {
color: red;
}


Styling hyperlinks using psuedoclasses

** don't directly style the anchor elements, always style using psuedoclass, to target different states. Always defined in the LVHA order.

a:link {
color: #1098ad;
text-decoration: none;
}

a:visited {
color: #777;
}

a:hover {
color: orangered;
font-weight: bold;
text-decoration: underline dotted orangered; (text-decoration-line   text-decoration-style   text-decoration-color)
}

a:active {
background-color: black;
}


Conflict between selectors

declaration marked as ! important > Inline style >ID-selector (if multiple, then last one applies) > 
Class-selector (psuedoclass has higher priority) > 
element selector > Universal selectors


footer p {
color: green !important;  (example of important keyword)
}


Inheritance and Universal selector


body (** It will have the lowest priority) {
color: red;
font-weight: bold;
}


** many properties don't get inherited, example : border properties.

** mostly properties related to text get inherited, ex: font-***, color, line-height, letter-spacing, text-align, text-transform, text-shadow,
   list-style, etc.
** Universal selector : applies to every single element on the page. Even those properties that don't get inherited, can be applied to all
                        the elements. Its not based on inheritance concept.



CSS BOX model

content, padding,border, margin
fill area : content + padding area (background-color, backgroung-image)

final element height/width (by default) :  border + padding + content

.main-header {
background-color: #f7f7f7;
padding: 20px;
padding-left: 40px;
padding-bottom: 40px;
(or)
padding: 20px 40px (top/bottom  left/right)
}


global reset (using universal selector)

* {
margin: 0;
padding: 0;
}


**If two margins(of adjacent elements) are occupying the same space, then both of them don't add up. instead one of them collapses.


.post-img {
width: 100%;
height: auto; (to maintain the aspect ratio)
}

.container {
width: 700px;
margin-left: auto;
margin-right: auto;
}


CSS Box types

1) Inline elements : occupy only space necessary for the content; no line-breaks; heights and width don't apply;
                     paddings and margins applied only horizontally
					 ex: button, em, strong, img (inline-block), a, etc.
					 use css --> display: inline;
2) Block level elements : occupy 100% of the parent's width, hence are stacked vertically. The CSS box model applies perfectly.
   use css --> display: block;
3) Inline-Block elements : looks like inline from outside; behaves like block-level on the inside; occupies only content's space; no-line
						   break caused; use css --> display: inline-block;

						   
nav a:link {
margin-right: 30px;
margin-top: 10px; (top margin doesn't work for inline elements)
display: inline-block;
}

nav a:link:last-child {
margin-right: 0;
}

Positioning in CSS

1) Normal flow : default positioning; elements is "in flow";elements are laid out in order in which they appear in HTML code
				 use CSS --> position: relative
2) Absolute positioning : "out if flow"; no impact on surrounding elements; use top, bottom, right, left properties to position relative to the container
						  use CSS --> position: absolute
						  use CSS on parent element --> position: relative


Psuedo elements

h1::first-letter {
font-style: normal;
margin-right: 5px;
}

p::first-line {
color: red;
}

h3 + p::first-line  ('+' here is a sibling selector, which selects the right next adjacent sibling of any element){
color: red;
}	


h2::after {
content: "TOP"; (mandatory field)
background-color: #ffe70e;
.
.
.
.
.
display: inline-block;
padding: 5px 10px;
position: absolute; (don't forget to add position relative in 'h2' element)
top: -10px;
right: -25px;
}
********************************** 3. BUILDING LAYOUTS ******************************************************************************************************
********************************** 4. COMPONENTS AND LAYOUTS ************************************************************************************************
********************************** 5. WEB DESIGN       ******************************************************************************************************
